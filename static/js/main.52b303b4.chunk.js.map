{"version":3,"sources":["logo.svg","UserDetails.js","UserList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","UserDetails","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","getUserDetails","val","prevProps","id","_this2","axios","get","then","response","setState","userDetails","react_default","a","createElement","className","data","name","email","phone","city","country","organization","jobProfile","additionalInfo","Component","UserList","selectedUser","getUserData","userList","_this3","map","user","key","onClick","src_UserDetails","App","src","logo","alt","src_UserList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52b303b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\n\r\nclass UserDetails extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getUserDetails(this.props.val)\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.val !== prevProps.val) {\r\n      this.getUserDetails(this.props.val)\r\n    }\r\n  }\r\n\r\n  getUserDetails(id) {\r\n    axios.get('data/customer' + id + '.json').then(response => {\r\n      this.setState({userDetails: response})\r\n    })\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.userDetails)\r\n      return (<p>Loading Data</p>)\r\n    return (<div className=\"userdetails margintop\">\r\n      <div className=\"centeralign panel panel-primary\">\r\n        <div className=\"panel-heading\"> {this.state.userDetails.data.name}</div>\r\n        <div className=\"panel-body\">\r\n          <p>Name : {this.state.userDetails.data.name}</p>\r\n          <p>Email : {this.state.userDetails.data.email}</p>\r\n          <p>Phone : {this.state.userDetails.data.phone}</p>\r\n          <p>City : {this.state.userDetails.data.city}</p>\r\n          <p>State : {this.state.userDetails.data.state}</p>\r\n          <p>Country : {this.state.userDetails.data.country}</p>\r\n          <p>Organization : {this.state.userDetails.data.organization}</p>\r\n          <p>Job Profile : {this.state.userDetails.data.jobProfile}</p>\r\n          <p>Additional Info : {this.state.userDetails.data.additionalInfo}</p>\r\n        </div>\r\n      </div>\r\n    </div>)\r\n  }\r\n}\r\nexport default UserDetails;\r\n","import React, { Component } from 'react';\r\nimport UserDetails from './UserDetails'\r\nimport axios from 'axios'\r\n\r\nclass UserList extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      selectedUser: 1\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getUserData();\r\n  }\r\n\r\n  getUserData() {\r\n    axios.get('data/userList.json').then(response => {\r\n      this.setState({userList: response})\r\n    })\r\n  };\r\n\r\n\r\n  render() {\r\n    if (!this.state.userList)\r\n      return (<p>Loading data</p>)\r\n    return (<div className=\"container addmargin\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-3\">\r\n          {\r\n            this.state.userList.data.map(user => <div key={user.name} className=\"panel panel-info margintop\">\r\n              <div className=\"mt-1 panel-heading\">{user.name}</div>\r\n              <div className=\"panel-body\">\r\n                <p>{user.email}</p>\r\n                <button className=\"btn btn-info\" onClick={() => this.setState({selectedUser: user.id})}>\r\n                  Click for user Details\r\n                </button>\r\n              </div>\r\n            </div>)\r\n          }\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <UserDetails val={this.state.selectedUser}/>\r\n        </div>\r\n      </div>\r\n    </div>)\r\n  }\r\n}\r\n\r\nexport default UserList;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport UserList from './UserList';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n           React Userlist App\n          </p>\n        </header>\n        <UserList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}